{"version":3,"sources":["Todo/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","state","userInput","items","event","this","setState","target","value","console","log","preventDefault","Item","parentNode","firstChild","nodeValue","indexActuel","indexOf","newtab","splice","map","item","key","className","onClick","deleteTodo","bind","type","placeholder","onChange","addTodo","renderTodo","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0ddbed71.chunk.js","sourcesContent":["/**\r\n * Created by yamine on 31/03/20.\r\n */\r\nimport React, { Component } from 'react';\r\n\r\nclass TodoList extends  Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userInput: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    onChange(event){\r\n        this.setState({\r\n            userInput: event.target.value\r\n        }, ( ) => console.log(this.state.userInput\r\n        ));\r\n    }\r\n\r\n    addTodo(event){\r\n        event.preventDefault(); // Évite le rechargement de la page js native\r\n        this.setState({\r\n            userInput: '',\r\n            items: [...this.state.items, this.state.userInput]\r\n        }, ( ) => console.log(this.state));\r\n    }\r\n\r\n    deleteTodo(event){\r\n        var target = event.target; // je récupère le X cliqué\r\n        var parent = target.parentNode; // je récupère le noeud parent\r\n        var Item = parent.firstChild.nodeValue; // je descend vers l'enfant pour récupérer l'item correspondant au X sélectionner\r\n        //console.log(Item);\r\n        //console.log(parent);\r\n        //console.log(target);\r\n        var indexActuel = this.state.items.indexOf(Item); // Grace à l'item retrouver, je récupère le bon index,\r\n        //console.log(indexActuel);\r\n        var newtab = this.state.items; // je crée un tableau temporaire\r\n        newtab.splice(indexActuel,1); // je met à jour mon tableau temporaire en enlevant la donnée (correspondant au X cliqué)\r\n        this.setState({\r\n            items : newtab  //je met à jour le tableau d'items correspondant à mon state.items\r\n        })\r\n    }\r\n\r\n    renderTodo(event){\r\n        return this.state.items.map((item) => {\r\n            return(\r\n                <div key={item}>\r\n                    <h2 className=\"mb-3\">{item}  <button className=\"btn btn-sm btn-danger\" onClick={this.deleteTodo.bind(this)}>X</button></h2>\r\n                    <hr/>\r\n                </div>\r\n            );\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"text-center mt-5 container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h1 className=\"mb-4\">TodoList</h1>\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    value={this.state.userInput}\r\n                                    type=\"text\"\r\n                                    placeholder=\"Renseigner un items\"\r\n                                    onChange={this.onChange.bind(this)}\r\n                                    className=\"form-control\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <button onClick={this.addTodo.bind(this)} className=\"btn btn-success btn-lg\">Ajouter</button>\r\n                            </div>\r\n                        </form>\r\n                        <div className=\"mt-5\">\r\n                            {this.renderTodo()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\n\nimport TodoList from './Todo/TodoList';\n\n\n\nfunction App() {\n  return (\n    <TodoList />\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}